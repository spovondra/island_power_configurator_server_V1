package com.islandpower.configurator.model.project;

import java.util.List;

/**
 * Model representing the solar panel configuration in a project.
 * <p>
 * This class contains attributes and methods to handle solar panel data, including efficiency losses,
 * installation type, total cost, and monthly data calculations.
 * </p>
 *
 * @version 1.0
 */
public class ProjectSolarPanel {

    private String solarPanelId; // ID of the selected solar panel
    private int numberOfPanels; // Maximum number of panels needed in any month
    private double totalPowerGenerated; // Total power generated by the panels (Watt-hours)
    private double totalCost; // Total cost of the selected panels
    private double efficiencyLoss; // Efficiency loss due to temperature or other factors
    private double estimatedDailyEnergyProduction; // Estimated daily energy production (Wh)
    private double panelOversizeCoefficient; // Oversize factor for the panels
    private double batteryEfficiency; // Efficiency of the battery system
    private double cableEfficiency; // Efficiency of the cabling
    private double manufacturerTolerance; // Manufacturer's tolerance value
    private double agingLoss; // Loss due to aging of the panels
    private double dirtLoss; // Loss due to dirt accumulation on the panels
    private String installationType; // Installation type (e.g., ground, roof_angle)
    private List<MonthlySolarData> monthlyData; // Monthly data for solar performance
    private String statusMessage; // Status message for the solar panel configuration

    /**
     * Default constructor for ProjectSolarPanel.
     */
    public ProjectSolarPanel() {}

    /**
     * Retrieves the ID of the selected solar panel.
     *
     * @return String - the ID of the solar panel
     */
    public String getSolarPanelId() {
        return solarPanelId;
    }

    /**
     * Updates the ID of the selected solar panel.
     *
     * @param solarPanelId - the new ID of the solar panel
     */
    public void setSolarPanelId(String solarPanelId) {
        this.solarPanelId = solarPanelId;
    }

    /**
     * Retrieves the maximum number of panels needed in any month.
     *
     * @return int - the number of panels
     */
    public int getNumberOfPanels() {
        return numberOfPanels;
    }

    /**
     * Updates the maximum number of panels needed in any month.
     *
     * @param numberOfPanels - the new number of panels
     */
    public void setNumberOfPanels(int numberOfPanels) {
        this.numberOfPanels = numberOfPanels;
    }

    /**
     * Retrieves the total power generated by the panels.
     *
     * @return double - total power in Watt-hours
     */
    public double getTotalPowerGenerated() {
        return totalPowerGenerated;
    }

    /**
     * Updates the total power generated by the panels.
     *
     * @param totalPowerGenerated - the new total power in Watt-hours
     */
    public void setTotalPowerGenerated(double totalPowerGenerated) {
        this.totalPowerGenerated = totalPowerGenerated;
    }

    /**
     * Retrieves the total cost of the selected panels.
     *
     * @return double - total cost
     */
    public double getTotalCost() {
        return totalCost;
    }

    /**
     * Updates the total cost of the selected panels.
     *
     * @param totalCost - the new total cost
     */
    public void setTotalCost(double totalCost) {
        this.totalCost = totalCost;
    }

    /**
     * Retrieves the efficiency loss due to factors like temperature.
     *
     * @return double - efficiency loss
     */
    public double getEfficiencyLoss() {
        return efficiencyLoss;
    }

    /**
     * Updates the efficiency loss.
     *
     * @param efficiencyLoss - the new efficiency loss
     */
    public void setEfficiencyLoss(double efficiencyLoss) {
        this.efficiencyLoss = efficiencyLoss;
    }

    /**
     * Retrieves the estimated daily energy production.
     *
     * @return double - estimated daily energy production in Wh
     */
    public double getEstimatedDailyEnergyProduction() {
        return estimatedDailyEnergyProduction;
    }

    /**
     * Updates the estimated daily energy production.
     *
     * @param estimatedDailyEnergyProduction - the new estimated daily energy production in Wh
     */
    public void setEstimatedDailyEnergyProduction(double estimatedDailyEnergyProduction) {
        this.estimatedDailyEnergyProduction = estimatedDailyEnergyProduction;
    }

    /**
     * Retrieves the oversize coefficient for the panels.
     *
     * @return double - panel oversize coefficient
     */
    public double getPanelOversizeCoefficient() {
        return panelOversizeCoefficient;
    }

    /**
     * Updates the oversize coefficient for the panels.
     *
     * @param panelOversizeCoefficient - the new panel oversize coefficient
     */
    public void setPanelOversizeCoefficient(double panelOversizeCoefficient) {
        this.panelOversizeCoefficient = panelOversizeCoefficient;
    }

    /**
     * Retrieves the efficiency of the battery system.
     *
     * @return double - battery efficiency
     */
    public double getBatteryEfficiency() {
        return batteryEfficiency;
    }

    /**
     * Updates the efficiency of the battery system.
     *
     * @param batteryEfficiency - the new battery efficiency
     */
    public void setBatteryEfficiency(double batteryEfficiency) {
        this.batteryEfficiency = batteryEfficiency;
    }

    /**
     * Retrieves the efficiency of the cabling.
     *
     * @return double - cable efficiency
     */
    public double getCableEfficiency() {
        return cableEfficiency;
    }

    /**
     * Updates the efficiency of the cabling.
     *
     * @param cableEfficiency - the new cable efficiency
     */
    public void setCableEfficiency(double cableEfficiency) {
        this.cableEfficiency = cableEfficiency;
    }

    /**
     * Retrieves the manufacturer's tolerance value.
     *
     * @return double - manufacturer's tolerance
     */
    public double getManufacturerTolerance() {
        return manufacturerTolerance;
    }

    /**
     * Updates the manufacturer's tolerance value.
     *
     * @param manufacturerTolerance - the new manufacturer's tolerance
     */
    public void setManufacturerTolerance(double manufacturerTolerance) {
        this.manufacturerTolerance = manufacturerTolerance;
    }

    /**
     * Retrieves the aging loss of the panels.
     *
     * @return double - aging loss
     */
    public double getAgingLoss() {
        return agingLoss;
    }

    /**
     * Updates the aging loss of the panels.
     *
     * @param agingLoss - the new aging loss
     */
    public void setAgingLoss(double agingLoss) {
        this.agingLoss = agingLoss;
    }

    /**
     * Retrieves the dirt loss on the panels.
     *
     * @return double - dirt loss
     */
    public double getDirtLoss() {
        return dirtLoss;
    }

    /**
     * Updates the dirt loss on the panels.
     *
     * @param dirtLoss - the new dirt loss
     */
    public void setDirtLoss(double dirtLoss) {
        this.dirtLoss = dirtLoss;
    }

    /**
     * Retrieves the installation type of the panels.
     *
     * @return String - installation type
     */
    public String getInstallationType() {
        return installationType;
    }

    /**
     * Updates the installation type of the panels.
     *
     * @param installationType - the new installation type
     */
    public void setInstallationType(String installationType) {
        this.installationType = installationType;
    }

    /**
     * Retrieves the monthly solar panel data.
     *
     * @return List<MonthlySolarData> - list of monthly solar data
     */
    public List<MonthlySolarData> getMonthlyData() {
        return monthlyData;
    }

    /**
     * Updates the monthly solar panel data.
     *
     * @param monthlyData - the new monthly data
     */
    public void setMonthlyData(List<MonthlySolarData> monthlyData) {
        this.monthlyData = monthlyData;
    }

    /**
     * Retrieves the status message for the solar panel configuration.
     *
     * @return String - status message
     */
    public String getStatusMessage() {
        return statusMessage;
    }

    /**
     * Updates the status message for the solar panel configuration.
     *
     * @param statusMessage - the new status message
     */
    public void setStatusMessage(String statusMessage) {
        this.statusMessage = statusMessage;
    }

    /**
     * Inner class to represent solar data for each month.
     */
    public static class MonthlySolarData {

        private int month; // Month number (1-12)
        private Double psh; // Peak Sun Hours (PSH)
        private Double ambientTemperature; // Ambient temperature in °C
        private double totalDailyEnergy; // Total daily energy production in Wh
        private double requiredEnergy; // Required energy for the month in Wh
        private double requiredPower; // Required power for the month in W
        private double efficiency; // Efficiency factor
        private double deratedPower; // Derated power due to losses
        private int numPanels; // Number of panels needed
        private double estimatedDailySolarEnergy; // Estimated daily solar energy production in Wh

        /**
         * Constructor for MonthlySolarData.
         *
         * @param month - The month number (1-12)
         * @param psh - Peak Sun Hours (PSH)
         * @param ambientTemperature - Ambient temperature in °C
         * @param totalDailyEnergy - Total daily energy production in Wh
         * @param requiredEnergy - Required energy for the month in Wh
         * @param requiredPower - Required power for the month in W
         * @param efficiency - Efficiency factor
         * @param deratedPower - Derated power due to losses
         * @param numPanels - Number of panels needed
         * @param estimatedDailySolarEnergy - Estimated daily solar energy production in Wh
         */
        public MonthlySolarData(int month, Double psh, Double ambientTemperature, double totalDailyEnergy,
                                double requiredEnergy, double requiredPower, double efficiency,
                                double deratedPower, int numPanels, double estimatedDailySolarEnergy) {
            this.month = month;
            this.psh = (psh != null) ? psh : 0.0;
            this.ambientTemperature = (ambientTemperature != null) ? ambientTemperature : 0.0;
            this.totalDailyEnergy = totalDailyEnergy;
            this.requiredEnergy = requiredEnergy;
            this.requiredPower = requiredPower;
            this.efficiency = efficiency;
            this.deratedPower = deratedPower;
            this.numPanels = numPanels;
            this.estimatedDailySolarEnergy = estimatedDailySolarEnergy;
        }

        // Getters and Setters for MonthlySolarData fields

        /**
         * Retrieves the month number.
         *
         * @return int - month number (1-12)
         */
        public int getMonth() {
            return month;
        }

        /**
         * Updates the month number.
         *
         * @param month - the new month number (1-12)
         */
        public void setMonth(int month) {
            this.month = month;
        }

        /**
         * Retrieves the Peak Sun Hours (PSH).
         *
         * @return Double - Peak Sun Hours
         */
        public Double getPsh() {
            return psh;
        }

        /**
         * Updates the Peak Sun Hours (PSH).
         *
         * @param psh - the new Peak Sun Hours
         */
        public void setPsh(Double psh) {
            this.psh = psh;
        }

        /**
         * Retrieves the ambient temperature.
         *
         * @return Double - ambient temperature in °C
         */
        public Double getAmbientTemperature() {
            return ambientTemperature;
        }

        /**
         * Updates the ambient temperature.
         *
         * @param ambientTemperature - the new ambient temperature in °C
         */
        public void setAmbientTemperature(Double ambientTemperature) {
            this.ambientTemperature = ambientTemperature;
        }

        /**
         * Retrieves the total daily energy production.
         *
         * @return double - total daily energy in Wh
         */
        public double getTotalDailyEnergy() {
            return totalDailyEnergy;
        }

        /**
         * Updates the total daily energy production.
         *
         * @param totalDailyEnergy - the new total daily energy in Wh
         */
        public void setTotalDailyEnergy(double totalDailyEnergy) {
            this.totalDailyEnergy = totalDailyEnergy;
        }

        /**
         * Retrieves the required energy for the month.
         *
         * @return double - required energy in Wh
         */
        public double getRequiredEnergy() {
            return requiredEnergy;
        }

        /**
         * Updates the required energy for the month.
         *
         * @param requiredEnergy - the new required energy in Wh
         */
        public void setRequiredEnergy(double requiredEnergy) {
            this.requiredEnergy = requiredEnergy;
        }

        /**
         * Retrieves the required power for the month.
         *
         * @return double - required power in W
         */
        public double getRequiredPower() {
            return requiredPower;
        }

        /**
         * Updates the required power for the month.
         *
         * @param requiredPower - the new required power in W
         */
        public void setRequiredPower(double requiredPower) {
            this.requiredPower = requiredPower;
        }

        /**
         * Retrieves the efficiency factor.
         *
         * @return double - efficiency factor
         */
        public double getEfficiency() {
            return efficiency;
        }

        /**
         * Updates the efficiency factor.
         *
         * @param efficiency - the new efficiency factor
         */
        public void setEfficiency(double efficiency) {
            this.efficiency = efficiency;
        }

        /**
         * Retrieves the derated power due to losses.
         *
         * @return double - derated power in W
         */
        public double getDeratedPower() {
            return deratedPower;
        }

        /**
         * Updates the derated power due to losses.
         *
         * @param deratedPower - the new derated power in W
         */
        public void setDeratedPower(double deratedPower) {
            this.deratedPower = deratedPower;
        }

        /**
         * Retrieves the number of panels needed for the month.
         *
         * @return int - number of panels
         */
        public int getNumPanels() {
            return numPanels;
        }

        /**
         * Updates the number of panels needed for the month.
         *
         * @param numPanels - the new number of panels
         */
        public void setNumPanels(int numPanels) {
            this.numPanels = numPanels;
        }

        /**
         * Retrieves the estimated daily solar energy production.
         *
         * @return double - estimated daily solar energy in Wh
         */
        public double getEstimatedDailySolarEnergy() {
            return estimatedDailySolarEnergy;
        }

        /**
         * Updates the estimated daily solar energy production.
         *
         * @param estimatedDailySolarEnergy - the new estimated daily solar energy in Wh
         */
        public void setEstimatedDailySolarEnergy(double estimatedDailySolarEnergy) {
            this.estimatedDailySolarEnergy = estimatedDailySolarEnergy;
        }
    }
}
